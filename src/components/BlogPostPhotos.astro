---
export interface IBlogPostPhoto {
  photoPath: string;
  width: number;
  height: number;
}
export interface Props {
  blogPostPhotos: IBlogPostPhoto[];
  index: number;
}

const { blogPostPhotos, index } = Astro.props;
---

<!-- 
  Web component:
  Store the index prop as a data attribute
  this is so we have unique element selectors 
-->
<blog-post-photos data-index={index}>
  <div class="my-5 overflow-hidden relative rounded-md border-4 border-neutral-700 bg-neutral-900">
    <div id=`img-container-${index}` class="flex items-center duration-500">
      <!--
        I had to use inline style bc 
        https://unocss.dev/guide/extracting#limitations

        Margin moves towards 0 as we get to smaller screens (w/ calc)
        margin will be 0 when the size of the parent is the same size
        as the image width. Then the image will just resize with the
        parent size and we want no margin. 

        Since we use a max func there is never negative margin.
      -->
      {
        blogPostPhotos.map((blogPostPhoto) => (
          <>
            <img
              style=`margin-left: max(0px, calc(50% - ${blogPostPhoto.width/2}px)); margin-right: max(0px, calc(50% - ${blogPostPhoto.width/2}px));`
              width={blogPostPhoto.width}
              height={blogPostPhoto.height}
              src={blogPostPhoto.photoPath}
            />
          </>
        ))
      }
    </div>
    <div class="absolute inset-0 grid grid-rows-3 p-2">
      <div></div>
      <div class="flex items-center justify-between">
        <button aria-label="Previous" id=`prev-button-${index}` class="bg-white grid items-center justify-center w-8 h-8 rounded-full opacity-60"><span class="i-carbon-chevron-left bg-neutral-900 opacity-60"></span></button>
        <button aria-label="Next" id=`next-button-${index}` class="bg-white grid items-center justify-center w-8 h-8 rounded-full opacity-60"><span class="i-carbon-chevron-right bg-neutral-900 opacity-60"></span></button>
      </div>
      <div id="indicator-container" class="flex items-end justify-center space-x-1.2">
        {blogPostPhotos.map((_, num: number) => {
          if (num === 0) {
            return <div class={"indicator-" + index + " bg-white opacity-100 w-1.5 h-1.5 rounded-full ease-in-out duration-200"}></div>;
          }
          return <div class={"indicator-" + index + " bg-white opacity-40 w-1.5 h-1.5 rounded-full ease-in-out duration-200"}></div>;
        })}
      </div>
    </div>
  </div>
</blog-post-photos>

<script>
  class BlogPostPhotos extends HTMLElement {
    constructor() {
      super();

      /**
       * Update the display of images and indicators based on the current active image index.
       * @param {number} activeIndex - The index of the active image.
       * @param {HTMLElement} imgContainer - The image container element.
      */
      function updateDisplay(activeIndex, imgContainer, indicators) {
        curr = activeIndex;
        imgContainer.style.transform = `translateX(-${(curr - 1) * 100}%)`;
        indicators.forEach((indicator, index) => {
          indicator.style.opacity =
            index === curr - 1 ? "1" : "0.4";
        });
      }

      // Query for needed elements within web component
      const nextButton = this.querySelector<HTMLElement>("#next-button-" + this.dataset.index);
      const prevButton = this.querySelector<HTMLElement>("#prev-button-" + this.dataset.index);
      const imgContainer = this.querySelector<HTMLElement>("#img-container-" + this.dataset.index);
      const indicators = this.querySelectorAll<HTMLElement>(".indicator-" + this.dataset.index);

      let curr = 1;
      const photosAmount =
        this.querySelectorAll("#img-container-" +  this.dataset.index + " img").length;

      // Make sure we have all the needed elements
      if (imgContainer && prevButton && nextButton && indicators) {
        nextButton.addEventListener("click", function () {
          // Check if we are on the last photo, go back to the first
          // Otherwise increase curr
          if (curr === photosAmount) {
            updateDisplay(1, imgContainer, indicators);
          } else {
            updateDisplay(curr + 1, imgContainer, indicators);
          }
        });

        prevButton.addEventListener("click", function () {
          // If at the first element, go back to the last
          // Otherwise decrease curr
          if (curr === 1) {
            updateDisplay(photosAmount, imgContainer, indicators);
          } else {
            updateDisplay(curr - 1, imgContainer, indicators);
          }
        });
      }
    }
  }
  customElements.define('blog-post-photos', BlogPostPhotos);
</script>